---
import type { KirbyMetaComponentProps } from '@app-types/components.types';

const { data, global, pageTitle } = Astro.props as KirbyMetaComponentProps;
const socialMeta = data.meta.social;
const kirbyUrl = global.kirbyUrl;
const currentOrigin = Astro.url.origin;
const separators = data.meta.separators || '|';
const siteTitle = global.siteTitle;
const orgOrPerson = data.meta.org || data.meta.person;
---

<title data-siteTitle={siteTitle} data-orgOrPerson={orgOrPerson}>
	{data.meta.title}
</title>
<meta name="description" content={data.meta.description} />
<meta name="robots" content={data.meta.robots} />
<link rel="canonical" href={data.meta.canonical} />
{
	Object.entries(socialMeta).map(([key, value]) => {
		const isTwitter = key.startsWith('twitter:');
		const content = (value as string).toString();

		return isTwitter ? (
			<meta name={key} content={content} />
		) : (
			<meta property={key} content={content} />
		);
	})
}
<link rel="sitemap" href={kirbyUrl + '/sitemap.xml'} />

<script define:vars={{ orgOrPerson, siteTitle, currentOrigin }}>
	if (!orgOrPerson) return;
	const script = document.createElement('script');
	script.setAttribute('type', 'application/ld+json');

	script.textContent = JSON.stringify({
		'@context': 'https://schema.org',
		'@type': 'WebSite',
		url: currentOrigin,
		name: siteTitle,
		publisher: {
			'@type': orgOrPerson['@type'],
			name: orgOrPerson['name'],
			email: orgOrPerson['email'] && orgOrPerson['email'],
			logo: orgOrPerson['logo'] && orgOrPerson['logo'],
			image: orgOrPerson['avatar'] && orgOrPerson['avatar'],
		},
	});
	document.head.appendChild(script);
</script>
